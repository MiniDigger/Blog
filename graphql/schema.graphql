# This file was generated. Do not edit manually.

schema {
  query: Query
}

type Query {
  article(
    filter: article_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): [article!]!
  article_aggregated(
    filter: article_filter
    groupBy: [String]
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): [article_aggregated!]!
  article_by_id(id: ID!): article
  blog: blog
  project(
    filter: project_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): [project!]!
  project_aggregated(
    filter: project_filter
    groupBy: [String]
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): [project_aggregated!]!
  project_by_id(id: ID!): project
}

type article {
  content: String
  date_created: Date
  date_created_func: datetime_functions
  date_published: Date
  date_published_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  slug: ID!
  status: String
  subtitle: String
  title: String
  user_created(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_users
  user_updated(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_users
}

type article_aggregated {
  count: article_aggregated_count
  countAll: Int
  countDistinct: article_aggregated_count
  group: JSON
}

type article_aggregated_count {
  content: Int
  date_created: Int
  date_published: Int
  date_updated: Int
  slug: Int
  status: Int
  subtitle: Int
  title: Int
  user_created: Int
  user_updated: Int
}

type blog {
  description: String
  id: ID!
  title: String
}

type count_functions {
  count: Int
}

type datetime_functions {
  day: Int
  hour: Int
  minute: Int
  month: Int
  second: Int
  week: Int
  weekday: Int
  year: Int
}

type directus_files {
  charset: String
  description: String
  duration: Int
  embed: String
  filename_disk: String
  filename_download: String!
  filesize: GraphQLBigInt
  folder(
    filter: directus_folders_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_folders
  height: Int
  id: ID!
  location: String
  metadata: JSON
  metadata_func: count_functions
  modified_by(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  storage: String!
  tags: JSON
  tags_func: count_functions
  title: String
  type: String
  uploaded_by(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_users
  uploaded_on: Date
  uploaded_on_func: datetime_functions
  width: Int
}

type directus_folders {
  id: ID!
  name: String!
  parent(
    filter: directus_folders_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_folders
}

type directus_roles {
  admin_access: Boolean!
  app_access: Boolean
  description: String
  enforce_tfa: Boolean!
  icon: String
  id: ID!
  ip_access: [String]
  name: String!
  users(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): [directus_users]
  users_func: count_functions
}

type directus_users {
  avatar(
    filter: directus_files_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_files
  description: String
  email: String
  first_name: String
  id: ID!
  language: String
  last_name: String
  last_page: String
  location: String
  password: Hash
  role(
    filter: directus_roles_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_roles
  status: String
  tags: JSON
  tags_func: count_functions
  tfa_secret: Hash
  theme: String
  title: String
}

type project {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  description: String
  id: ID!
  link: String
  status: String
  title: String
  user_created(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_users
  user_updated(
    filter: directus_users_filter
    limit: Int
    offset: Int
    page: Int
    search: String
    sort: [String]
  ): directus_users
}

type project_aggregated {
  avg: project_aggregated_fields
  avgDistinct: project_aggregated_fields
  count: project_aggregated_count
  countAll: Int
  countDistinct: project_aggregated_count
  group: JSON
  max: project_aggregated_fields
  min: project_aggregated_fields
  sum: project_aggregated_fields
  sumDistinct: project_aggregated_fields
}

type project_aggregated_count {
  date_created: Int
  date_updated: Int
  description: Int
  id: Int
  link: Int
  status: Int
  title: Int
  user_created: Int
  user_updated: Int
}

type project_aggregated_fields {
  id: Float
}

"ISO8601 Date values"
scalar Date

"BigInt value"
scalar GraphQLBigInt

"A Float or a String"
scalar GraphQLStringOrFloat

"Hashed string values"
scalar Hash

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input article_filter {
  _and: [article_filter]
  _or: [article_filter]
  content: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_published: date_filter_operators
  date_published_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  slug: string_filter_operators
  status: string_filter_operators
  subtitle: string_filter_operators
  title: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _nnull: Boolean
  _null: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

input date_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: String
  _gt: String
  _gte: String
  _in: [String]
  _lt: String
  _lte: String
  _nbetween: [GraphQLStringOrFloat]
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _null: Boolean
}

input datetime_function_filter_operators {
  day: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  month: number_filter_operators
  second: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

input directus_files_filter {
  _and: [directus_files_filter]
  _or: [directus_files_filter]
  charset: string_filter_operators
  description: string_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  filesize: number_filter_operators
  folder: directus_folders_filter
  height: number_filter_operators
  id: string_filter_operators
  location: string_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  storage: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  uploaded_by: directus_users_filter
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  width: number_filter_operators
}

input directus_folders_filter {
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
}

input directus_roles_filter {
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  description: string_filter_operators
  enforce_tfa: boolean_filter_operators
  icon: string_filter_operators
  id: string_filter_operators
  ip_access: string_filter_operators
  name: string_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
}

input directus_users_filter {
  _and: [directus_users_filter]
  _or: [directus_users_filter]
  avatar: directus_files_filter
  description: string_filter_operators
  email: string_filter_operators
  first_name: string_filter_operators
  id: string_filter_operators
  language: string_filter_operators
  last_name: string_filter_operators
  last_page: string_filter_operators
  location: string_filter_operators
  password: hash_filter_operators
  role: directus_roles_filter
  status: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  tfa_secret: hash_filter_operators
  theme: string_filter_operators
  title: string_filter_operators
}

input hash_filter_operators {
  _empty: Boolean
  _nempty: Boolean
  _nnull: Boolean
  _null: Boolean
}

input number_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: GraphQLStringOrFloat
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _nbetween: [GraphQLStringOrFloat]
  _neq: GraphQLStringOrFloat
  _nin: [GraphQLStringOrFloat]
  _nnull: Boolean
  _null: Boolean
}

input project_filter {
  _and: [project_filter]
  _or: [project_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  description: string_filter_operators
  id: number_filter_operators
  link: string_filter_operators
  status: string_filter_operators
  title: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

input string_filter_operators {
  _contains: String
  _empty: Boolean
  _ends_with: String
  _eq: String
  _icontains: String
  _in: [String]
  _ncontains: String
  _nempty: Boolean
  _nends_with: String
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _nstarts_with: String
  _null: Boolean
  _starts_with: String
}
